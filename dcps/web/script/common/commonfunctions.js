
/* Function to go to a specified URL on Button click. Generated by Dreamweaver*/
function MM_goToURL() { //v3.0
  var i, args=MM_goToURL.arguments; document.MM_returnValue = false;
  for (i=0; i<(args.length-1); i+=2) eval(args[i]+".location='"+args[i+1]+"'");
}

/* Function to open a popup. Generated by Dreamweaver*/
function MM_openBrWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
} 
//Sorting for single selection box
function sortSingle(box)  
{
	var temp_opts = new Array();
	var temp = new Object();
	var selText;
	var selValue;
	var asIndex=0;
	var temp="";
	for(var i=0; i<box.options.length; i++)  
	{
		//alert(box.options[i].text); 
		temp_opts[i] = box.options[i];
		if(box.options[i].defaultSelected)
		{
	//	selText = box.options[i].text; 
		//selValue = box.options[i].value; 
		}
		
		
		
	}
	//alert("selText is"+box.options[0].text);
	for(var j=1;j<=temp_opts.length-1;j++)
	{
		//alert(temp_opts[j].text);
	}
	for(var x=0; x<=temp_opts.length-1; x++)  
	{
		if(temp_opts[x].text == box.options[0].text)
		{
			selText=temp_opts[x].text;
			
			selValue=temp_opts[x].value;
			//box.options[0]=new Option(temp_opts[x].text,temp_opts[x].value);
		}
		else
		{
		for(var y=(x+1); y<=temp_opts.length-1; y++)  
		{
				
				//alert(temp_opts[x].text);
			if(temp_opts[x].text.toUpperCase() > temp_opts[y].text.toUpperCase() && temp_opts[x].value!="") 
			{
				temp = temp_opts[x].text;
				temp_opts[x].text = temp_opts[y].text;
				temp_opts[y].text = temp;
				temp = temp_opts[x].value;
				temp_opts[x].value = temp_opts[y].value;
				temp_opts[y].value = temp;
			}
	   }
	   }
	}
	

	eval(box).innerHTML="";
	box.options[0]=new Option(selText,selValue);
	for(var i=1; i<temp_opts.length; i++)  
	{
		
		box.options[i] = new Option	(temp_opts[i].text,temp_opts[i].value);
		//if((box.options[i].text == selText) && (box.options[i].value == selValue))
		//{
			//box[i].selected=true;
		//}
	}
		
}

// Function to check that a string contains only numbers
//Params:
//string -> field value (document.formname.textboxname.value
//ignoreWhiteSpace -> 'true' or 'false'
function isNumeric(string, ignoreWhiteSpace) {
   if (string.search) {
      if ((ignoreWhiteSpace && string.search(/[^\d\s]/) != -1) || (!ignoreWhiteSpace && string.search(/\D/) != -1)) return false;
   }
   return true;
}


//For Dual Box
// Automatically sort items within lists? (1 or 0)
cmbctr=0;
sortitems = 1;  // Automatically sort items within lists? (1 or 0)
function move(fbox,tbox) 
{
	for(var i=0; i<fbox.options.length; i++) 
	{

		if(fbox.options[i].selected && fbox.options[i].value != "") 
		{
			var no = new Option();
			no.value = fbox.options[i].value;
			no.text = fbox.options[i].text;
			tbox.options[tbox.options.length] = no;
			fbox[i--] = null;
 		    cmbctr=i+1;
	   }
	}
	 if(cmbctr!=fbox.options.length)
	 {
	  if(cmbctr!=fbox.options.length)
	   fbox.options[cmbctr].selected=true;
	 }
	 else if((cmbctr==fbox.options.length) && (fbox.options.length!=0))
	 {
	  fbox.options[0].selected=true;
	 }
	 if (sortitems) 
	 {
		SortDual(tbox);
		SortDual(fbox);
	 }
}

function moveAll(fbox, tbox)
{
	for(i = 0; i < fbox.options.length; i++) 
	{
		fbox.options[i].selected=true;
	}
	move(fbox, tbox);
}

function SortDual(box)  
{

	var temp_opts = new Array();
	var temp = new Object();
	for(var i=0; i<box.options.length; i++)  
	{
		temp_opts[i] = box.options[i];
	}
	for(var x=0; x<temp_opts.length-1; x++)  
	{
		for(var y=(x+1); y<temp_opts.length; y++)  
		{
			if(temp_opts[x].text.toUpperCase() > temp_opts[y].text.toUpperCase())  
			{
				temp = temp_opts[x].text;
				temp_opts[x].text = temp_opts[y].text;
				temp_opts[y].text = temp;
				temp = temp_opts[x].value;
				temp_opts[x].value = temp_opts[y].value;
				temp_opts[y].value = temp;
		  }
	   }
	}
	for(var i=0; i<box.options.length; i++)  
	{
		box.options[i].value = temp_opts[i].value;
		box.options[i].text = temp_opts[i].text;
	}
}
 /** End of functions for moving lists from and to listboxes in
  * Dual Boxes.
  */


/**Rollover**/
function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}
/**Rollover**/

/** DROP DOWN MENU**/

function toggleRows(elm) {
 var rows = document.getElementsByTagName("TR");
 var newDisplay = "none";
 var thisID = elm.parentNode.parentNode.parentNode.id + "-";
 var matchDirectChildrenOnly = false;
 for (var i = 0; i < rows.length; i++) {
   var r = rows[i];
   if (matchStart(r.id, thisID, matchDirectChildrenOnly)) {
    if (r.style.display == "none") {
     if (document.all) newDisplay = "block"; //IE4+ specific code
     else newDisplay = "table-row"; //Netscape and Mozilla
    }
    break;
   }
 }
 if (newDisplay != "none") {
  matchDirectChildrenOnly = true;
 }
 for (var j = 0; j < rows.length; j++) {
   var s = rows[j];
   if (matchStart(s.id, thisID, matchDirectChildrenOnly)) {
     s.style.display = newDisplay;
   }
 }
}

function matchStart(target, pattern, matchDirectChildrenOnly) {
 var pos = target.indexOf(pattern);
 if (pos != 0) return false;
 if (!matchDirectChildrenOnly) return true;
 if (target.slice(pos + pattern.length, target.length).indexOf("-") >= 0) return false;
 return true;
}

function collapseAllRows() {
 var rows = document.getElementsByTagName("TR");
 for (var j = 0; j < rows.length; j++) {
   var r = rows[j];
   if (r.id.indexOf("-") >= 0) {
     r.style.display = "none";    
   }
 }
}
/**DROP DOWN MENU**/

/**Right Click disable**/
/*var message="Function Disabled!";
///////////////////////////////////
function clickIE() {if (document.all) {alert(message);return false;}}
function clickNS(e) {if
(document.layers||(document.getElementById&&!document.all)) {
if (e.which==2||e.which==3) {alert(message);return false;}}}
if (document.layers)
{document.captureEvents(Event.MOUSEDOWN);document.onmousedown=clickNS;}
else{document.onmouseup=clickNS;document.oncontextmenu=clickIE;}
document.oncontextmenu=new Function("return false")
*/

/**Swap up and down images**/
var refer=true;
function swapImages()
{
if (refer) {
  document.arrow.src='/images/sublinks-uparrow.jpg';
  refer=false;
}
else {
  document.arrow.src='/images/sublinks-dnarrow.jpg';
  refer=true;
}

}

var refer1=true;
function swapImages1()
{
if (refer1) {
  document.arrow1.src='/images/sublinks-uparrow.jpg';
  refer1=false;
}
else {
  document.arrow1.src='/images/sublinks-dnarrow.jpg';
  refer1=true;
}

}

var refer2=true;
function swapImages2()
{
if (refer2) {
  document.arrow2.src='/images/sublinks-uparrow.jpg';
  refer2=false;
}
else {
  document.arrow2.src='/images/sublinks-dnarrow.jpg';
  refer2=true;
}
}
/**Function For Toggling of Basic and Advance**/
function showhide1()
{
	var args=showhide.arguments;
	for (var i=0; i<(args.length); i=i+2)	
	{
		eval(args[i]+".style.display='"+args[i+1]+"'");
	}
}

/**Function to change the ACTION_MODE used to decide what action to call,
 * prior to submitting the form. Call this function on button click, passing the new mode
 * as argument. The form_name and the action_mode is taken automatically
 */
function setActionMode(theMode) {
    var ACTION_VARIABLE = "c_strActionMode";
    var theForm = formName;
    var expression = formName + ACTION_VARIABLE + ".value=" + theMode;
    eval(expression);
	
	//Below statement is commented by Lomesh
	// If you have any problem with it, let me know.
    //eval(formName + "submit()");

} 

/*******************************************************
To use this you will have to call one function in your jsp:
setParameters(<checkbox field name>);

Example:
		javascript:
		setParameters("UniId");
		
		html:
		<!--This will toggle all checkbox fields-->
		<input type="checkbox" name="toggleAll" onclick="ToggleAll(this);">

		<!--The id of this must be passed to setParameters method-->
		<input type="checkbox" name="UniId" onclick="Toggle(this);">

*******************************************************
function CheckSelected() will return true if one/more checkbox is selected,
false otherwise.
function getCheckedValue() will return checked check box value if only one checkbox is selcted,
-1 otherwise
*******************************************************/
	function Toggle(e,tableId,i,flag)
    { 
		if(e.checked) 
			eval(formName + "toggleAll").checked = AllChecked();
		else 
			eval(formName + "toggleAll").checked = false;
		changeRowColor(tableId,i,flag);
    }

    function ToggleAll(e,tableId)
    {
		if(e.checked) 
		    CheckAll(tableId);
		else
			ClearAll(tableId);
    }

    function Check(e)
    {
		e.checked = true;
    }

    function Clear(e)
    {
		e.checked = false;
    }

    function CheckAll(tableId)
	{
		var ml = eval("document." + formNamePassed);
		var len = ml.elements.length;
		var j = 0;
		for (var i = 0; i < len; i++) 
		{
			var e = ml.elements[i];
			if(e.name == checkboxName || e.id == checkboxName) 
			{
				Check(e);
				changeRowColor(tableId,j+1,true);					
				j++;
			}

		}
		ml.toggleAll.checked = true;
	}

    function ClearAll(tableId)
	{
		var ml = eval("document." + formNamePassed);
		var len = ml.elements.length;
		var j = 0;
		for(var i = 0; i < len; i++) 
		{
			var e = ml.elements[i];
			if(e.name == checkboxName || e.id == checkboxName)
			{
				Clear(e);
				changeRowColor(tableId,j+1,false);
				j++;
			}
		}
		ml.toggleAll.checked = false;
	}
	
	function AllChecked()
	{
		ml = eval("document." + formNamePassed);
		len = ml.elements.length;
		for(var i = 0 ; i < len ; i++) 
		{
			if((ml.elements[i].name == checkboxName || ml.elements[i].id == checkboxName) && !ml.elements[i].checked) 		
				return false;
		}
		return true;
	}

	//function CheckSelected() will return true if one/more checkbox is selected,
	//false otherwise.
	function CheckSelected()
	{
		ml = eval("document." + formNamePassed);
		len = ml.elements.length;
		var retVal = false;
		for(var i = 0 ; i < len ; i++) 
		{
			if((ml.elements[i].name == checkboxName || ml.elements[i].id == checkboxName) && ml.elements[i].checked) 
			{
				retVal = true;
				break;
			}
		}
		return retVal;
	}

	//function getCheckedValue() will return checked check box value if only one checkbox is selcted,
	//-1 otherwise
	function getCheckedValue()
	{
		ml = eval("document." + formNamePassed);
		len = ml.elements.length;
		var retValue = -1;
		var count = 0;

		for(var i = 0 ; i < len ; i++) 
		{
			if((ml.elements[i].name == checkboxName || ml.elements[i].id == checkboxName) && ml.elements[i].checked) 
			{					
				count++;
				if(count > 1)
				{
					retValue = -1;
					break;
				}
				else
					retValue = ml[i].value;			
			}
		}
		return retValue;
	}
/**
 * Function to change the color of the row when selected.Sets grey back ground color 	
 * when selected else white background.Syntax to call the function
 * <INPUT TYPE="checkbox" ........... onClick="changeRowColor(<tableId>,<rowId>,this.checked)">
 * if required to be call explictly
 */

function changeRowColor(tableId,rowId,flag)
{
	var oTable = document.getElementById(tableId);
	if(flag)
	{
		oTable.rows[rowId].className="selected-row";
	}
	else
	{
		oTable.rows[rowId].className="defualt-row";
	}
} 

function makeAllSelected(id)
{
	var obj=document.getElementById(id);
	
	var count=obj.options.length;
		
	var i=0;
	while(i<count)
	{
		obj.options[i].selected=true;
		i++;
	}

}
function onLoadEvent()
{
	
}
/**
  *This function Check That Two Strings Are Matching Or Not
  *The Basic Purpose Of This Function is To match Password
*/

function matchString(strOne,strTwo)
{
	if(strOne.length!=strTwo.length)
	{
		alert("Password Do Not Match");
		return false;
	}
	else if(strOne==strTwo)
	{
		return true;
	}
	else
	{
		alert("Password Do Not Match");
		return false;
	}
	return false;
}

/**
	*Function for trimming white spaces from string.
	*Usage:	strVar = strVar.trim();
*/
	String.prototype.trim = function()
	{
		return this.replace(/(^\s*)|(\s*$)/g, "");
	}

function trim(inputString) {
   // Removes leading and trailing spaces from the passed string. Also removes
   // consecutive spaces and replaces it with one space. If something besides
   // a string is passed in (null, custom object, etc.) then return the input.
   if (typeof inputString != "string") { return inputString; }
   var retValue = inputString;
   var ch = retValue.substring(0, 1);
   while (ch == " ") { // Check for spaces at the beginning of the string
      retValue = retValue.substring(1, retValue.length);
      ch = retValue.substring(0, 1);
   }
   ch = retValue.substring(retValue.length-1, retValue.length);
   while (ch == " ") { // Check for spaces at the end of the string
      retValue = retValue.substring(0, retValue.length-1);
      ch = retValue.substring(retValue.length-1, retValue.length);
   }
   while (retValue.indexOf("  ") != -1) { // Note that there are two spaces in the string - look for multiple spaces within the string
      retValue = retValue.substring(0, retValue.indexOf("  ")) + retValue.substring(retValue.indexOf("  ")+1, retValue.length); // Again, there are two spaces in each of the strings
   }
   return retValue; // Return the trimmed string back to the user
} // Ends the "trim" function	
function getAlertMessageWithParam( msg, flds )
{
    var alertMsg = msg;
    var i = 0;
    //alert( alertMsg.indexOf( '%' ) );
    while( alertMsg.indexOf( '%' ) >= 0 )
    {
        //alert( alertMsg );
        //alert( flds[i] );
        alertMsg = replaceStringWithParam( alertMsg, "%", "'" + flds[i] + "'" );
        i += 1;
        if( i > flds.length )
        {
            break;
        }
    }
    //alert( alertMsg );
    return alertMsg;
}
// replace searchString with replaceString
function replaceStringWithParam(mainStr,searchStr,replaceStr)
{
    var front = getFrontStr(mainStr,searchStr)
    var end = getEndStr(mainStr,searchStr)
    if (front != null && end != null) {
        return front + replaceStr + end
    }
    return null
}
// extract front part of string prior to searchString
function getFrontStr(mainStr,searchStr)
{
    foundOffset = mainStr.indexOf(searchStr)
    if (foundOffset == -1) {
        return null
    }
    return mainStr.substring(0,foundOffset)
}

// extract back end of string after searchString
function getEndStr(mainStr,searchStr) 
{
    foundOffset = mainStr.indexOf(searchStr)
    if (foundOffset == -1) {
        return null
    }
    return mainStr.substring(foundOffset+searchStr.length,mainStr.length)
}
/**
	*Function for selecting Default value;
*/
function selectSelection(selectBoxId, defaultValue)
{
	var lstLength = document.getElementById(selectBoxId).options.length;
	for(var dynCounter = 0; dynCounter < lstLength; dynCounter++)
	{
		if(document.getElementById(selectBoxId).options[dynCounter].value == defaultValue)
		{
		 	document.getElementById(selectBoxId).options[dynCounter].selected = "true";
			break;
		}
	}
}
function isName(contName)
{
		camprEn=/^[A-Za-z ]*$/;
		camprGu=/^[\u0A80-\u0AFF \t]*$/;
		flag=true;
 		if(!(camprEn.test(contName.value)))
 		{
			flag=false;
			if(camprGu.test(contName.value))
	 		{
				flag=true;
			}
		}
		if(!flag)
		{
 			alert(cmnLblArray[7]);
 			contName.focus();
 			contName.select();
 		}
		return (flag);
}

  function findPosY(obj)
  {
    var curtop = 0;
    if(obj.offsetParent)
        while(1)
        {
          curtop += obj.offsetTop;
          if(!obj.offsetParent)
            break;
          obj = obj.offsetParent;
        }
    else if(obj.y)
        curtop += obj.y;
    return curtop;
  }
  
  function findPosX(obj)
  {
    var curleft = 0;
    if(obj.offsetParent)
        while(1) 
        {
          curleft += obj.offsetLeft;
          if(!obj.offsetParent)
            break;
          obj = obj.offsetParent;
        }
    else if(obj.x)
        curleft += obj.x;
    return curleft;
  }

  function addLeftMenuDiv()
  {
  	try{
  		var navDiv = document.getElementById("verticalnav");
  		navDiv.style.display = '';
  		navDiv.style.top = topPos_Div+'px';
  		if(document.getElementById('mnucntntdiv') == null || document.getElementById('mnucntntdiv') == undefined)
  		{
  			document.getElementById('vMenuTableID').style.display = 'none';
  		}
  		else
  		{
  			document.getElementById('mnucntntdiv').style.display = 'none';
  		}
  	
  	}catch(e){/*alert('addLeftMenuDiv: '+e.message);*/}
  }
  function addRightInfoDiv()
  {
  	try
  	{
  		var navRightDiv = document.getElementById("rightInfo");
  		navRightDiv.style.top = topPos_Div+'px';
  		navRightDiv.style.display = 'none';
  	}
  	catch(e){/*alert('addRightInfoDiv: '+e.message);*/}
  }

  
  /* Added by Dharmendrasinh Mahida [ 603222]
   * for multipal contact of a person
   * Strat
   */
    
  
	function ckPhoneNumbers()
	{
		var num = window.event.keyCode;
		if ((eval(num)<48||eval(num)>57) && eval(num)!=44) 
		{
			return false;
		}
		else
		{
			return true;
			
		}
	}

	/**
	*
	* @version 0.1.1
	* @author Dharmendrasinh Mahida [603222]
	* @date  05 March 2009
	* @param objTxt jsp field name 
	* @param msg  Stringmsg if validation faild
	* @param type String Type of validation
	* 
	* @return boolean true/false base on value inserted
	*/
	function MultiContactValuesValidate(objTxt,msg,type)
	{
		strValueTxt=objTxt.value;
		strat=/^,+/;
		end=/,+$/;
		btween=/,,+/g;
		if(strat.test(strValueTxt) || btween.test(strValueTxt) ||end.test(strValueTxt))
		{
			alert(msg);
			objTxt.focus();
		}
		else
		{
			inputArray = strValueTxt.split(',');
			for(i=0;i<inputArray.length;i++)
			{
				if(!validateContact(type,msg,objTxt.name,inputArray[i]))
					return false;
			}
			
		}
//			objTxt.value=strValueTxt.replace(/^,*/, '').replace(/,*$/, '').replace(/,+/g, ',');

}	
	
	/**
	*
	* @version 0.1.1
	* @author Dharmendrasinh Mahida [603222]
	* @date  05 March 2009
	* @return boolean true if values are valid comma sapreted string
	*         false if field cantain invalid value(s).
	*/
function validateContact()
{
	var args=validateContact.arguments;
	
    if(!document.getElementById(args[2]))
	{
		return true;
	}
	
	//Allows integer 0 or greater than 0
	nre= /^\d+$/;// 'RNum'
	//Checks Email
	emailre = /^\w+(\-\w+)*(\.\w+(\-\w+)*)*@\w+(\-\w+)*(\.\w+(\-\w+)*)+$/;//'REmail'
	//Phone Number
	phonere = /^[1-9]\d{2}\-\s?\d{3}\-\d{4}$/;//'RPhone'



	//for security check start	
	if(!cssCheck(args[2], args[1]))
	{
		return false;
	}
	//for security check end
	FldExpVal=args[3];
	var str =  args[1];
		if (args[0]=='RNum')
		{
			if(!isFieldValueNull(FldExpVal))
			{
				if (!nre.test(FldExpVal))
				{
					alert(str);	
//					alert(args[3] +' '+args[1]);
					selectRequiredTab(args[2]);					
					setFocusSelection(args[2]);
					return false;
				}
				else
				{
					return true;
				}
			}
			else
				return true;
		}
		else if (args[0]=='REmail')
		{
			if(!isFieldValueNull(FldExpVal))
			{
				if (!emailre.test(FldExpVal))
				{
					alert(str);					
					//alert(args[3] +' '+args[1]);
					selectRequiredTab(args[2]);					
					setFocusSelection(args[2]);
					return false;
				}
				else
				{
					return true;
				}
			}
			else
				return true;
		}
		else if (args[0]=='RPhone')
		{
			if(!phonere.test(FldExpVal))
			{
				alert(str);				
				//alert(args[3] +' '+args[1]);
				selectRequiredTab(args[2]);				
				setFocusSelection(args[2]);
				return false;
			}
			else
			{
				return true;
			}
		}
}
/**
*
* @version 0.1.1
* @author Dharmendrasinh Mahida [603222]
* @date  05 March 2009
* @param str String  
* @param val string 
* @return String  str+','+val

*/
function appendWithComma(str,val)
{
	str=str.trim();
	if(str!=null && str!='')
		str=str+","+val;
	else
		str=val;
	return str;
}

/**
 *
 * @version 0.1.1
 * @author Dharmendrasinh Mahida [603222]
 * @date  05 March 2009
 * @param xmlDOM XML dom object 
 * @param contectLookupName String Lookup Name
 * @param cmnPersonMst String cmnPersonMst field Name in DOM
 * @return ContectDetails Array
 *      one can get values from following key
 * 		ContectDetails['officePhone']
		ContectDetails['residencePhone']
		ContectDetails['mobile']
		ContectDetails['email']
		ContectDetails['fax']
 */
function populateContects(xmlDOM,contectLookupName,cmnPersonMst)
{
		var officePhone='';
		var residencePhone='';
		var mobile='';
		var email='';
		var fax='';
		if(cmnPersonMst==null)
			cmnPersonMst='cmnPersonMst';
		for(i=0;i<xmlDOM.getElementsByTagName('com.tcs.sgv.hod.common.valueobject.CmnContactMst').length;i++)			 
		{
			lookupName=getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/cmnLookupMst/lookupName');
//			alert('lookupName::'+lookupName);
			if(lookupName!=null)
			{
				if(lookupName==contectLookupName)
				{
					if(getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/residencePhone')!=null)
						residencePhone=appendWithComma(residencePhone,getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/residencePhone'));
					if(getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/officePhone')!=null)
						officePhone=appendWithComma(officePhone,getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/officePhone'));
					if(getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/mobile')!=null)
						mobile=appendWithComma(mobile,getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/mobile'));
					if(getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/email')!=null)
						email=appendWithComma(email,getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/email'));
					if(getXPathValueFromDOM(xmlDOM, cmnPersonMst+'/cmnContactMsts['+i+']/fax')!=null)
						fax=appendWithComma(fax,getXPathValueFromDOM(xmlDOM,cmnPersonMst+'/cmnContactMsts['+i+']/fax'));

				}
			}
				
		}
		var ContectDetails = new Array();
		ContectDetails['officePhone']=officePhone;
		ContectDetails['residencePhone']=residencePhone;
		ContectDetails['mobile']=mobile;
		ContectDetails['email']=email;
		ContectDetails['fax']=fax;

		return ContectDetails;

}



/* 
 * End Multi Contact 
 Dharmendrasinh Mahida */

function changeLocale(url,lang)
{
	document.getElementById("changeLang").value = lang;
	for(var x=0;x<oldReqEleArray.length;x++)
	{
		var value = oldReqValueArray[x];
		var span = document.getElementById('saveRequestSpan');
		var str="<input type='hidden' name='"+name+"' value='"+value+"'/>";
		span.innerHTML+=str;
	}
	
	try{
		document.saveRequestFORM[0].action = url;
		document.saveRequestFORM.submit();
	}catch(e)
	{
		alert(e.message);
	}
}
function changeTheme(url,theme)
{
	document.getElementById("theme").value = theme;
	for(var x=0;x<oldReqEleArray.length;x++)
	{
		var value = oldReqValueArray[x];
		var span = document.getElementById('saveRequestSpan');
		var str="<input type='hidden' name='"+name+"' value='"+value+"'/>";
		span.innerHTML+=str;
	}
	try{
		document.saveRequestFORM[0].action = url ;
		document.saveRequestFORM.submit();
	}catch(e)
	{
		alert(e.message);
	}
}


//Following func. prevents user to enter '-' more than once consecutively - START - Vipul
function isValidRemText(lThis)
{
		if(window.event.keyCode == 45)
		{
			var lStr = lThis.value;
			var lastChar = lStr.charAt(lStr.length - 1);
			if(lastChar == '-')
			{
				window.event.keyCode = 0;
			}
		}
}
function onFocus(element){
	element.style.borderColor='red';
	element.style.borderWidth= '1px'; 
	element.style.borderStyle= 'solid';			
}
function onBlur(element){
	//alert(element);
	element.style.borderColor='';
	element.style.borderWidth= ''; 
	element.style.borderStyle= '' ;
}
// END - Vipul